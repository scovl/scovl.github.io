<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on scovl</title>
    <link>https://scovl.github.io/post/</link>
    <description>Recent content in Posts on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Mon, 21 Jul 2025 12:00:00 +0000</lastBuildDate>
    <atom:link href="https://scovl.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Como o compilador do Rust funciona?</title>
      <link>https://scovl.github.io/2025/07/21/rustcomp/</link>
      <pubDate>Mon, 21 Jul 2025 12:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/07/21/rustcomp/</guid>
      <description>&lt;p&gt;O Rust é famoso por ser uma linguagem que evita muitos erros de memória sem precisar de um coletor de lixo rodando em segundo plano. Mas como ele faz isso? O segredo está no compilador, que passa seu código por várias etapas até virar um programa que o computador entende. Neste artigo, explicarei de forma simples cada fase desse processo: desde a leitura do código &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lexical_analysis&#34;&gt;lexing&lt;/a&gt;&lt;/strong&gt;, passando pela análise da estrutura &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Parsing&#34;&gt;parsing&lt;/a&gt;&lt;/strong&gt;, até a geração do código final pelo &lt;strong&gt;&lt;a href=&#34;https://llvm.org/&#34;&gt;LLVM&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inferência de Tipos em Rust e C&#43;&#43;</title>
      <link>https://scovl.github.io/2025/07/18/type01/</link>
      <pubDate>Fri, 18 Jul 2025 23:18:18 -0300</pubDate>
      <guid>https://scovl.github.io/2025/07/18/type01/</guid>
      <description>&lt;p&gt;&lt;em&gt;Inferência de tipos&lt;/em&gt; é o mecanismo pelo qual o compilador descobre automaticamente o tipo de uma variável ou expressão em uma linguagem de programação. Esse recurso permite que o programador omita anotações de tipo em muitas situações sem comprometer a segurança de tipos do programa. Neste artigo, discutimos como as linguagens &lt;strong&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B&#34;&gt;C++&lt;/a&gt;&lt;/strong&gt; implementam inferência de tipos de formas fundamentalmente diferentes, analisando as consequências práticas de cada abordagem. Exploramos também brevemente o caso do &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Swift_%28programming_language%29&#34;&gt;Swift&lt;/a&gt;&lt;/strong&gt;, comparando sua estratégia híbrida e os desafios de desempenho que ela acarreta. Ao final, refletimos sobre o impacto dessas escolhas de design na experiência de programação.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Try/Catch: Origem, Propósito e o Erro de Usá-lo como Fluxo Lógico</title>
      <link>https://scovl.github.io/2025/05/23/trycatch/</link>
      <pubDate>Fri, 23 May 2025 19:41:45 -0300</pubDate>
      <guid>https://scovl.github.io/2025/05/23/trycatch/</guid>
      <description>&lt;p&gt;O conceito de &lt;a href=&#34;https://en.wikipedia.org/wiki/Exception_handling&#34;&gt;tratamento de exceções&lt;/a&gt; tem raízes mais antigas do que muitos imaginam. Embora tenha se popularizado nos anos 70, suas origens remontam ao final dos anos 50 e início dos 60, com linguagens como &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_%28programming_language%29&#34;&gt;LISP&lt;/a&gt; (1958) e &lt;a href=&#34;https://en.wikipedia.org/wiki/Simula&#34;&gt;SIMULA 67&lt;/a&gt;, que introduziram conceitos fundamentais de manipulação de condições excepcionais. No entanto, foi nos anos 70 com linguagens como &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PL/I&#34;&gt;PL/I&lt;/a&gt;&lt;/strong&gt; e posteriormente &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_%28programming_language%29&#34;&gt;Ada&lt;/a&gt;&lt;/strong&gt; que vimos o surgimento de formas mais estruturadas e organizadas de lidar com erros, incluindo construções mais próximas ao que hoje reconhecemos como &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tratamento Funcional de Erros em TypeScript</title>
      <link>https://scovl.github.io/2025/05/12/tserr/</link>
      <pubDate>Mon, 12 May 2025 18:31:45 -0300</pubDate>
      <guid>https://scovl.github.io/2025/05/12/tserr/</guid>
      <description>&lt;p&gt;Neste artigo, vamos explorar uma abordagem mais estruturada para o tratamento de erros em TypeScript usando conceitos de programação funcional. A biblioteca &lt;a href=&#34;https://gcanti.github.io/fp-ts/&#34;&gt;fp-ts&lt;/a&gt; (Functional Programming em TypeScript) oferece ferramentas que permitem lidar com falhas de forma explícita e type-safe, melhorando a robustez e legibilidade do código. Existem também outras bibliotecas com abordagens semelhantes ou complementares no ecossistema TypeScript:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/purify-ts/purify-ts&#34;&gt;&lt;strong&gt;Purify-ts&lt;/strong&gt;&lt;/a&gt;: Uma alternativa mais leve ao fp-ts, focada em tipos como Maybe e Either&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/neverthrow&#34;&gt;&lt;strong&gt;Neverthrow&lt;/strong&gt;&lt;/a&gt;: Biblioteca especializada em tratamento de erros com Result/Either&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect&#34;&gt;&lt;strong&gt;Effect-ts&lt;/strong&gt;&lt;/a&gt;: Uma biblioteca mais recente que expande os conceitos do fp-ts com um foco em efeitos&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-ts&#34;&gt;&lt;strong&gt;Zio-ts&lt;/strong&gt;&lt;/a&gt;: Inspirada na biblioteca ZIO de Scala, oferecendo abstrações para IO, concorrência e recursos&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Cada uma dessas bibliotecas tem seus pontos fortes, mas o &lt;a href=&#34;https://gcanti.github.io/fp-ts/&#34;&gt;fp-ts&lt;/a&gt; se destaca pela sua maturidade, documentação abrangente e ecossistema rico de bibliotecas complementares. Neste artigo, focaremos no fp-ts e em como ele aborda o tratamento de erros de forma funcional.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RAG Simples com Clojure e Ollama</title>
      <link>https://scovl.github.io/2025/03/23/rag/</link>
      <pubDate>Sun, 23 Mar 2025 19:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/03/23/rag/</guid>
      <description>&lt;h1 id=&#34;sumário&#34;&gt;Sumário&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#introdu%c3%a7%c3%a3o&#34;&gt;Introdução&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#fundamentos-do-rag&#34;&gt;Fundamentos do RAG&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#o-que-%c3%a9-rag&#34;&gt;O que é RAG?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#por-que-precisamos-do-rag&#34;&gt;Por que precisamos do RAG?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#os-tr%c3%aas-pilares-do-rag&#34;&gt;Os Três Pilares do RAG&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#por-que-o-deepseek-r1&#34;&gt;Por que o DeepSeek R1?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#implementa%c3%a7%c3%a3o-pr%c3%a1tica&#34;&gt;Implementação Prática&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#preparando-o-ambiente&#34;&gt;Preparando o Ambiente&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#estrutura-do-projeto&#34;&gt;Estrutura do Projeto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#processamento-de-documentos&#34;&gt;Processamento de Documentos&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#sistema-de-embeddings&#34;&gt;Sistema de Embeddings&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#interface-com-ollama&#34;&gt;Interface com Ollama&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#m%c3%b3dulo-principal&#34;&gt;Módulo Principal&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#como-usar&#34;&gt;Como Usar&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#instala%c3%a7%c3%a3o-do-ollama&#34;&gt;Instalação do Ollama&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#tf-idf&#34;&gt;TF-IDF&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#configura%c3%a7%c3%a3o-do-projeto&#34;&gt;Configuração do Projeto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#executando-a-aplica%c3%a7%c3%a3o&#34;&gt;Executando a Aplicação&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#considera%c3%a7%c3%b5es-t%c3%a9cnicas&#34;&gt;Considerações Técnicas&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#performance-e-otimiza%c3%a7%c3%b5es&#34;&gt;Performance e Otimizações&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#prompt-engineering&#34;&gt;Prompt Engineering&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#pr%c3%b3ximos-passos&#34;&gt;Próximos Passos&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#melhorias-propostas&#34;&gt;Melhorias Propostas&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#usando-langchain4j&#34;&gt;Usando Langchain4j&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/#refer%c3%aancias&#34;&gt;Referências&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;&#xA;&lt;p&gt;Olá, pessoal! 👋&lt;/p&gt;</description>
    </item>
    <item>
      <title>Busca Semântica com Ollama e PostgreSQL</title>
      <link>https://scovl.github.io/2025/03/25/semantic-postgresql/</link>
      <pubDate>Tue, 25 Mar 2025 12:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/03/25/semantic-postgresql/</guid>
      <description>&lt;h1 id=&#34;sumário&#34;&gt;Sumário&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#introdu%c3%a7%c3%a3o&#34;&gt;Introdução&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#entendendo-a-arquitetura&#34;&gt;Entendendo a Arquitetura&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#pr%c3%a9-requisitos&#34;&gt;Pré-requisitos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#passos-para-construir-a-busca-sem%c3%a2ntica&#34;&gt;Passos para Construir a Busca Semântica&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#1-habilitando-as-extens%c3%b5es&#34;&gt;1. Habilitando as Extensões&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#2-criando-a-tabela-de-documentos&#34;&gt;2. Criando a Tabela de Documentos&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#3-inserindo-documentos&#34;&gt;3. Inserindo Documentos&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#4-configurando-o-vectorizer&#34;&gt;4. Configurando o Vectorizer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#5-realizando-busca-sem%c3%a2ntica&#34;&gt;5. Realizando Busca Semântica&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#integra%c3%a7%c3%a3o-com-clojure&#34;&gt;Integração com Clojure&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#persist%c3%aancia-de-modelos-entre-reinicializa%c3%a7%c3%b5es&#34;&gt;Persistência de Modelos entre Reinicializações&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/25/semantic-postgresql/#conclus%c3%a3o&#34;&gt;Conclusão&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;&#xA;&lt;p&gt;Olá, pessoal! 👋&lt;/p&gt;&#xA;&lt;p&gt;No &lt;a href=&#34;https://scovl.github.io/2025/03/23/rag/&#34;&gt;artigo anterior&lt;/a&gt;, exploramos como construir um sistema RAG (Retrieval-Augmented Generation) usando &lt;a href=&#34;https://clojure.org/&#34;&gt;Clojure&lt;/a&gt; e &lt;a href=&#34;https://ollama.com/&#34;&gt;Ollama&lt;/a&gt; com uma implementação simples de &lt;a href=&#34;https://scovl.github.io/post/tf-idf/&#34;&gt;TF-IDF&lt;/a&gt;. Embora essa abordagem seja excelente para aprender os fundamentos, quando pensamos em soluções de produção, precisamos de algo mais robusto e escalável.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Técnicas Avançadas para RAG em Produção</title>
      <link>https://scovl.github.io/2025/03/28/rag02/</link>
      <pubDate>Fri, 28 Mar 2025 12:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/03/28/rag02/</guid>
      <description>&lt;h1 id=&#34;sumário&#34;&gt;Sumário&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#introdu%c3%a7%c3%a3o&#34;&gt;Introdução&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#da-teoria-%c3%a0-produ%c3%a7%c3%a3o-os-desafios-reais&#34;&gt;Da Teoria à Produção: Os Desafios Reais&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#armadilhas-comuns-e-como-evit%c3%a1-las&#34;&gt;Armadilhas Comuns e Como Evitá-las&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#armadilha-1-a-falsa-sensa%c3%a7%c3%a3o-de-relev%c3%a2ncia&#34;&gt;Armadilha 1: A Falsa Sensação de Relevância&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#armadilha-2-tamanho-inadequado-de-chunks&#34;&gt;Armadilha 2: Tamanho Inadequado de Chunks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#armadilha-3-falta-de-monitoramento-cont%c3%adnuo&#34;&gt;Armadilha 3: Falta de Monitoramento Contínuo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#armadilha-4-consultas-complexas-em-pipelines-simples&#34;&gt;Armadilha 4: Consultas Complexas em Pipelines Simples&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#t%c3%a9cnicas-avan%c3%a7adas-de-otimiza%c3%a7%c3%a3o&#34;&gt;Técnicas Avançadas de Otimização&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#re-ranqueamento-de-chunks&#34;&gt;Re-ranqueamento de Chunks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#estrat%c3%a9gias-de-chunking-din%c3%a2mico&#34;&gt;Estratégias de Chunking Dinâmico&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#workflows-com-agentes-para-consultas-complexas&#34;&gt;Workflows com Agentes para Consultas Complexas&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#arquitetura-de-agentes-avan%c3%a7ada&#34;&gt;Arquitetura de Agentes Avançada&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#casos-de-uso-para-workflows-de-agentes&#34;&gt;Casos de Uso para Workflows de Agentes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#pipelines-multimodais&#34;&gt;Pipelines Multimodais&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#arquitetura-multimodal-completa&#34;&gt;Arquitetura Multimodal Completa&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#esquema-postgresql-para-dados-multimodais&#34;&gt;Esquema PostgreSQL para Dados Multimodais&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#desafios-de-implementa%c3%a7%c3%a3o-multimodal&#34;&gt;Desafios de Implementação Multimodal&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#estrat%c3%a9gias-de-cache&#34;&gt;Estratégias de Cache&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#estrat%c3%a9gias-avan%c3%a7adas-de-cache-para-rag&#34;&gt;Estratégias Avançadas de Cache para RAG&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#monitoramento-e-m%c3%a9tricas-llmops-na-pr%c3%a1tica&#34;&gt;Monitoramento e Métricas: LLMOps na Prática&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#m%c3%a9tricas-de-qualidade-espec%c3%adficas-para-rag&#34;&gt;Métricas de Qualidade Específicas para RAG&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#automa%c3%a7%c3%a3o-da-avalia%c3%a7%c3%a3o-com-llms-como-ju%c3%adzes&#34;&gt;Automação da Avaliação com LLMs como Juízes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#configura%c3%a7%c3%a3o-de-um-dashboard-de-qualidade-rag&#34;&gt;Configuração de um Dashboard de Qualidade RAG&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#integra%c3%a7%c3%a3o-com-sistemas-de-feedback-do-usu%c3%a1rio&#34;&gt;Integração com Sistemas de Feedback do Usuário&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#implementando-no-docai&#34;&gt;Implementando no DocAI&lt;/a&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#arquitetura-atual-do-docai&#34;&gt;Arquitetura Atual do DocAI&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#diferenciais-do-docai&#34;&gt;Diferenciais do DocAI&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#pr%c3%b3ximos-passos-para-o-docai&#34;&gt;Próximos Passos para o DocAI&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#integra%c3%a7%c3%a3o-com-o-ecossistema&#34;&gt;Integração com o Ecossistema&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#conclus%c3%a3o&#34;&gt;Conclusão&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://scovl.github.io/2025/03/28/rag02/#refer%c3%aancias&#34;&gt;Referências&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;&#xA;&lt;p&gt;Olá pessoal! 👋&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://scovl.github.io/1/01/01/jsast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/1/01/01/jsast/</guid>
      <description>&lt;h2 id=&#34;desvendando-asts-com-javascript-typescript-e-esprima-um-guia-amigável-&#34;&gt;Desvendando ASTs com JavaScript, TypeScript e Esprima: Um Guia Amigável 🤖&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Tempo de Leitura: uns 15-25 minutinhos (ou um café ☕)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;O que você vai encontrar aqui:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Introdução (Sem formalidades!)&lt;/li&gt;&#xA;&lt;li&gt;ASTs: O Que Raios é Isso?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Traduzindo: O que é uma AST?&lt;/li&gt;&#xA;&lt;li&gt;Pra que serve essa &amp;ldquo;árvore&amp;rdquo;?&lt;/li&gt;&#xA;&lt;li&gt;Os 3 Passos Mágicos da AST&lt;/li&gt;&#xA;&lt;li&gt;Por que começar com o Esprima?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Mão na Massa: Bora Codar!&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Preparando o Terreno (Instalação)&lt;/li&gt;&#xA;&lt;li&gt;Nosso Projetinho Simples&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Parseando&amp;rdquo;: Transformando Código em AST&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Traversando&amp;rdquo;: Dando um Rolê na AST&lt;/li&gt;&#xA;&lt;li&gt;Analisando: Catando Informações Úteis&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Como Rodar Isso Aí&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Instalando o Esprima (Moleza!)&lt;/li&gt;&#xA;&lt;li&gt;Exemplo Básico pra Sentir o Gostinho&lt;/li&gt;&#xA;&lt;li&gt;Botando pra Funcionar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Detalhes Importantes (Pra Ficar Ligado!)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Performance: Roda Liso?&lt;/li&gt;&#xA;&lt;li&gt;Entendendo as Peças do Quebra-Cabeça (ESTree)&lt;/li&gt;&#xA;&lt;li&gt;E se o Código Tiver Erro?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Próximos Níveis (O que mais dá pra fazer?)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Turbinando a Brincadeira&lt;/li&gt;&#xA;&lt;li&gt;Outras Ferramentas na Caixa&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Onde Achar Mais Info (Links Úteis)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Olá pessoal! 👋&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://scovl.github.io/1/01/01/rama/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/1/01/01/rama/</guid>
      <description>&lt;h1 id=&#34;next-level-backends-with-rama-storing-and-traversing-graphs-in-60-loc&#34;&gt;Next-level Backends with Rama: Storing and Traversing Graphs in 60 LOC&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introdução-ao-rama&#34;&gt;Introdução ao Rama&lt;/h2&gt;&#xA;&lt;p&gt;Rama é uma plataforma que permite a criação de backends escaláveis com uma quantidade mínima de código. Sistemas que normalmente exigiriam milhares de linhas de código podem ser implementados em algumas dezenas de linhas, oferecendo:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Escalabilidade para milhões de leituras/escritas por segundo&lt;/li&gt;&#xA;&lt;li&gt;Conformidade ACID&lt;/li&gt;&#xA;&lt;li&gt;Alto desempenho&lt;/li&gt;&#xA;&lt;li&gt;Tolerância a falhas através de replicação incremental&lt;/li&gt;&#xA;&lt;li&gt;Implantação, atualização e escalonamento via simples comandos CLI&lt;/li&gt;&#xA;&lt;li&gt;Monitoramento abrangente integrado&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;exemplo-armazenamento-e-travessia-de-grafos&#34;&gt;Exemplo: Armazenamento e Travessia de Grafos&lt;/h2&gt;&#xA;&lt;p&gt;Para demonstrar a potência do Rama, vamos analisar a implementação de um backend para armazenamento de grafos e execução de consultas rápidas de travessia. O exemplo específico é uma árvore genealógica, onde cada nó (pessoa) tem dois pais e qualquer número de filhos.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
