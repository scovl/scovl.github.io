<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on scovl</title>
    <link>http://localhost:1313/tags/clojure/</link>
    <description>Recent content in Clojure on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Sun, 23 Mar 2025 19:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Análise de código estático</title>
      <link>http://localhost:1313/2025/03/23/dd01/</link>
      <pubDate>Sun, 23 Mar 2025 19:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2025/03/23/dd01/</guid>
      <description>Análise Estática de Código: Entendendo seu Programa sem Executá-lo Muitos mecanismos que ocorrem naturalmente em nosso dia-a-dia no desenvolvimento de software, muitas vezes, não são devidamente apreciados e nem mesmo conhecidos. Ações das quais parecem mágicas, mas que na verdade são resultado de um grande esforço de muitas pessoas ao longo de décadas.&#xA;Como quando você abre uma IDE e tem à sua disposição ferramentas que parecem mágicas como intelisense, autocompletion, dumping de variáveis e palavras reservadas de cada linguagem de programação, entre outras.</description>
    </item>
    <item>
      <title>Teste de Syntax Highlighting</title>
      <link>http://localhost:1313/2024/03/24/test-syntax-highlighting/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/24/test-syntax-highlighting/</guid>
      <description>Teste de Syntax Highlighting Vamos testar o highlighting para código Clojure:&#xA;;; src/docai/document.clj&#xD;(ns docai.document&#xD;(:require [markdown-to-hiccup.core :as md]&#xD;[hickory.core :as html]&#xD;[clojure.string :as str]))&#xD;(defn is-string? [x]&#xD;(instance? String x))&#xD;(defn extract-text-from-markdown [content]&#xD;(try&#xD;(let [hiccup-result (md/md-&amp;gt;hiccup content)&#xD;text-nodes (filter is-string? (flatten hiccup-result))]&#xD;text-nodes)&#xD;(catch Exception e&#xD;(println &amp;#34;Erro ao processar Markdown:&amp;#34; (.getMessage e))&#xD;[content])))&#xD;E também podemos testar código de outras linguagens:&#xA;def hello_world():&#xD;print(&amp;#34;Hello, world!&amp;#34;)&#xD;return 42&#xD;# Este é um comentário&#xD;class Example:&#xD;def __init__(self, value):&#xD;self.</description>
    </item>
  </channel>
</rss>
