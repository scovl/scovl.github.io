<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Segurança on scovl</title>
    <link>https://scovl.github.io/tags/seguran%C3%A7a/</link>
    <description>Recent content in Segurança on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Mon, 21 Jul 2025 12:00:00 +0000</lastBuildDate>
    <atom:link href="https://scovl.github.io/tags/seguran%C3%A7a/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Como o compilador do Rust funciona?</title>
      <link>https://scovl.github.io/2025/07/21/rustcomp/</link>
      <pubDate>Mon, 21 Jul 2025 12:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/07/21/rustcomp/</guid>
      <description>&lt;p&gt;O Rust é famoso por ser uma linguagem que evita muitos erros de memória sem precisar de um coletor de lixo rodando em segundo plano. Mas como ele faz isso? O segredo está no compilador, que passa seu código por várias etapas até virar um programa que o computador entende. Neste artigo, explicarei de forma simples cada fase desse processo: desde a leitura do código &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lexical_analysis&#34;&gt;lexing&lt;/a&gt;&lt;/strong&gt;, passando pela análise da estrutura &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Parsing&#34;&gt;parsing&lt;/a&gt;&lt;/strong&gt;, até a geração do código final pelo &lt;strong&gt;&lt;a href=&#34;https://llvm.org/&#34;&gt;LLVM&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
