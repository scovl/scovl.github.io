<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programação on scovl</title>
    <link>https://scovl.github.io/tags/programa%C3%A7%C3%A3o/</link>
    <description>Recent content in Programação on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Fri, 18 Jul 2025 23:18:18 -0300</lastBuildDate>
    <atom:link href="https://scovl.github.io/tags/programa%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Inferência de Tipos em Rust e C&#43;&#43;</title>
      <link>https://scovl.github.io/2025/07/18/type01/</link>
      <pubDate>Fri, 18 Jul 2025 23:18:18 -0300</pubDate>
      <guid>https://scovl.github.io/2025/07/18/type01/</guid>
      <description>&lt;p&gt;&lt;em&gt;Inferência de tipos&lt;/em&gt; é o mecanismo pelo qual o compilador descobre automaticamente o tipo de uma variável ou expressão em uma linguagem de programação. Esse recurso permite que o programador omita anotações de tipo em muitas situações sem comprometer a segurança de tipos do programa. Neste artigo, discutimos como as linguagens &lt;strong&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B&#34;&gt;C++&lt;/a&gt;&lt;/strong&gt; implementam inferência de tipos de formas fundamentalmente diferentes, analisando as consequências práticas de cada abordagem. Exploramos também brevemente o caso do &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Swift_%28programming_language%29&#34;&gt;Swift&lt;/a&gt;&lt;/strong&gt;, comparando sua estratégia híbrida e os desafios de desempenho que ela acarreta. Ao final, refletimos sobre o impacto dessas escolhas de design na experiência de programação.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
