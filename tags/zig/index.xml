<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zig on scovl</title>
    <link>https://scovl.github.io/tags/zig/</link>
    <description>Recent content in Zig on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Fri, 23 May 2025 19:41:45 -0300</lastBuildDate>
    <atom:link href="https://scovl.github.io/tags/zig/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Try/Catch: Origem, Propósito e o Erro de Usá-lo como Fluxo Lógico</title>
      <link>https://scovl.github.io/2025/05/23/trycatch/</link>
      <pubDate>Fri, 23 May 2025 19:41:45 -0300</pubDate>
      <guid>https://scovl.github.io/2025/05/23/trycatch/</guid>
      <description>&lt;p&gt;O conceito de &lt;a href=&#34;https://en.wikipedia.org/wiki/Exception_handling&#34;&gt;tratamento de exceções&lt;/a&gt;, incluindo o &lt;code&gt;try/catch&lt;/code&gt;, surgiu nos anos 70 com linguagens como &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PL/I&#34;&gt;PL/I&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_%28programming_language%29&#34;&gt;Ada&lt;/a&gt;&lt;/strong&gt;, que criaram formas mais organizadas de lidar com erros. Antes disso, os programas usavam &lt;a href=&#34;https://en.wikipedia.org/wiki/Return_code&#34;&gt;códigos de retorno&lt;/a&gt; ou checagens manuais, o que deixava o código cheio de bugs e difícil de manter. A ideia era simples: separar o que o programa faz normalmente de como ele lida com as coisas que dão errado, como falhas de hardware, problemas de &lt;a href=&#34;https://en.wikipedia.org/wiki/Input/output&#34;&gt;entrada/saída&lt;/a&gt; ou quando alguém tenta &lt;a href=&#34;https://en.wikipedia.org/wiki/Division_by_zero&#34;&gt;dividir por zero&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
