<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on scovl</title>
    <link>https://scovl.github.io/tags/rust/</link>
    <description>Recent content in Rust on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Wed, 23 Jul 2025 12:00:00 +0000</lastBuildDate>
    <atom:link href="https://scovl.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compreendendo a concorrência em Rust</title>
      <link>https://scovl.github.io/2025/07/23/rustconc/</link>
      <pubDate>Wed, 23 Jul 2025 12:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/07/23/rustconc/</guid>
      <description>&lt;p&gt;O Rust costuma ser apresentado como &lt;strong&gt;a linguagem que impede aqueles bugs de memória cabeludos&lt;/strong&gt; antes mesmo do seu código rodar. Mas essa história não para no &lt;strong&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html#the-borrow-checker&#34;&gt;borrow checker&lt;/a&gt;&lt;/strong&gt;: ela se estende à concorrência. O pessoal da comunidade fala em &lt;strong&gt;fearless concurrenc&lt;/strong&gt; — “concorrência sem medo”. Mas o que isso significa realmente? Como explicar isso para alguém que vem de outras linguagens? Em resumo, Rust transforma muitos erros de concorrência em erros de compilação em vez de runtime, graças ao seu sistema de &lt;em&gt;ownership&lt;/em&gt; e tipos. Esse aspecto é o que chamamos de &lt;strong&gt;concorrência sem medo&lt;/strong&gt;, onde escrever código concorrente não precisa ser uma roleta-russa de bugs sutis.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Como o compilador do Rust funciona?</title>
      <link>https://scovl.github.io/2025/07/21/rustcomp/</link>
      <pubDate>Mon, 21 Jul 2025 12:00:00 +0000</pubDate>
      <guid>https://scovl.github.io/2025/07/21/rustcomp/</guid>
      <description>&lt;p&gt;O Rust é famoso por ser uma linguagem que evita muitos erros de memória sem precisar de um coletor de lixo rodando em segundo plano. Mas como ele faz isso? O segredo está no compilador, que passa seu código por várias etapas até virar um programa que o computador entende. Neste artigo, explicarei de forma simples cada fase desse processo: desde a leitura do código &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lexical_analysis&#34;&gt;lexing&lt;/a&gt;&lt;/strong&gt;, passando pela análise da estrutura &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Parsing&#34;&gt;parsing&lt;/a&gt;&lt;/strong&gt;, até a geração do código final pelo &lt;strong&gt;&lt;a href=&#34;https://llvm.org/&#34;&gt;LLVM&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inferência de Tipos em Rust e C&#43;&#43;</title>
      <link>https://scovl.github.io/2025/07/18/type01/</link>
      <pubDate>Fri, 18 Jul 2025 23:18:18 -0300</pubDate>
      <guid>https://scovl.github.io/2025/07/18/type01/</guid>
      <description>&lt;p&gt;&lt;em&gt;Inferência de tipos&lt;/em&gt; é o mecanismo pelo qual o compilador descobre automaticamente o tipo de uma variável ou expressão em uma linguagem de programação. Esse recurso permite que o programador omita anotações de tipo em muitas situações sem comprometer a segurança de tipos do programa. Neste artigo, discutimos como as linguagens &lt;strong&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B&#34;&gt;C++&lt;/a&gt;&lt;/strong&gt; implementam inferência de tipos de formas fundamentalmente diferentes, analisando as consequências práticas de cada abordagem. Exploramos também brevemente o caso do &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Swift_%28programming_language%29&#34;&gt;Swift&lt;/a&gt;&lt;/strong&gt;, comparando sua estratégia híbrida e os desafios de desempenho que ela acarreta. Ao final, refletimos sobre o impacto dessas escolhas de design na experiência de programação.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Try/Catch: Origem, Propósito e o Erro de Usá-lo como Fluxo Lógico</title>
      <link>https://scovl.github.io/2025/05/23/trycatch/</link>
      <pubDate>Fri, 23 May 2025 19:41:45 -0300</pubDate>
      <guid>https://scovl.github.io/2025/05/23/trycatch/</guid>
      <description>&lt;p&gt;O conceito de &lt;a href=&#34;https://en.wikipedia.org/wiki/Exception_handling&#34;&gt;tratamento de exceções&lt;/a&gt; tem raízes mais antigas do que muitos imaginam. Embora tenha se popularizado nos anos 70, suas origens remontam ao final dos anos 50 e início dos 60, com linguagens como &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_%28programming_language%29&#34;&gt;LISP&lt;/a&gt; (1958) e &lt;a href=&#34;https://en.wikipedia.org/wiki/Simula&#34;&gt;SIMULA 67&lt;/a&gt;, que introduziram conceitos fundamentais de manipulação de condições excepcionais. No entanto, foi nos anos 70 com linguagens como &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PL/I&#34;&gt;PL/I&lt;/a&gt;&lt;/strong&gt; e posteriormente &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_%28programming_language%29&#34;&gt;Ada&lt;/a&gt;&lt;/strong&gt; que vimos o surgimento de formas mais estruturadas e organizadas de lidar com erros, incluindo construções mais próximas ao que hoje reconhecemos como &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
