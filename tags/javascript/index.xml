<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on scovl</title>
    <link>https://scovl.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on scovl</description>
    <generator>Hugo</generator>
    <language>pt</language>
    <copyright>Vitor Lobo</copyright>
    <lastBuildDate>Fri, 23 May 2025 19:41:45 -0300</lastBuildDate>
    <atom:link href="https://scovl.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Try/Catch: Origem, Propósito e o Erro de Usá-lo como Fluxo Lógico</title>
      <link>https://scovl.github.io/2025/05/23/trycatch/</link>
      <pubDate>Fri, 23 May 2025 19:41:45 -0300</pubDate>
      <guid>https://scovl.github.io/2025/05/23/trycatch/</guid>
      <description>&lt;p&gt;O conceito de &lt;a href=&#34;https://en.wikipedia.org/wiki/Exception_handling&#34;&gt;tratamento de exceções&lt;/a&gt;, incluindo o &lt;code&gt;try/catch&lt;/code&gt;, surgiu nos anos 70 com linguagens como &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PL/I&#34;&gt;PL/I&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_%28programming_language%29&#34;&gt;Ada&lt;/a&gt;&lt;/strong&gt;, que criaram formas mais organizadas de lidar com erros. Antes disso, os programas usavam &lt;a href=&#34;https://en.wikipedia.org/wiki/Return_code&#34;&gt;códigos de retorno&lt;/a&gt; ou checagens manuais, o que deixava o código cheio de bugs e difícil de manter. A ideia era simples: separar o que o programa faz normalmente de como ele lida com as coisas que dão errado, como falhas de hardware, problemas de &lt;a href=&#34;https://en.wikipedia.org/wiki/Input/output&#34;&gt;entrada/saída&lt;/a&gt; ou quando alguém tenta &lt;a href=&#34;https://en.wikipedia.org/wiki/Division_by_zero&#34;&gt;dividir por zero&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tratamento Funcional de Erros em TypeScript</title>
      <link>https://scovl.github.io/2025/05/12/tserr/</link>
      <pubDate>Mon, 12 May 2025 18:31:45 -0300</pubDate>
      <guid>https://scovl.github.io/2025/05/12/tserr/</guid>
      <description>&lt;p&gt;Neste artigo, vamos explorar uma abordagem mais estruturada para o tratamento de erros em TypeScript usando conceitos de programação funcional. A biblioteca &lt;a href=&#34;https://gcanti.github.io/fp-ts/&#34;&gt;fp-ts&lt;/a&gt; (Functional Programming em TypeScript) oferece ferramentas que permitem lidar com falhas de forma explícita e type-safe, melhorando a robustez e legibilidade do código. Existem também outras bibliotecas com abordagens semelhantes ou complementares no ecossistema TypeScript:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/purify-ts/purify-ts&#34;&gt;&lt;strong&gt;Purify-ts&lt;/strong&gt;&lt;/a&gt;: Uma alternativa mais leve ao fp-ts, focada em tipos como Maybe e Either&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/neverthrow&#34;&gt;&lt;strong&gt;Neverthrow&lt;/strong&gt;&lt;/a&gt;: Biblioteca especializada em tratamento de erros com Result/Either&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect&#34;&gt;&lt;strong&gt;Effect-ts&lt;/strong&gt;&lt;/a&gt;: Uma biblioteca mais recente que expande os conceitos do fp-ts com um foco em efeitos&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-ts&#34;&gt;&lt;strong&gt;Zio-ts&lt;/strong&gt;&lt;/a&gt;: Inspirada na biblioteca ZIO de Scala, oferecendo abstrações para IO, concorrência e recursos&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Cada uma dessas bibliotecas tem seus pontos fortes, mas o &lt;a href=&#34;https://gcanti.github.io/fp-ts/&#34;&gt;fp-ts&lt;/a&gt; se destaca pela sua maturidade, documentação abrangente e ecossistema rico de bibliotecas complementares. Neste artigo, focaremos no fp-ts e em como ele aborda o tratamento de erros de forma funcional.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
